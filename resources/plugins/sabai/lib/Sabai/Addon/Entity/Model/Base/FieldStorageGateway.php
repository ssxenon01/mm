<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Entity_Model_Base_FieldStorageGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'entity_fieldstorage';
    }

    public function getFields()
    {
        return array('fieldstorage_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldstorage_addon' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldstorage_created' => SabaiFramework_Model::KEY_TYPE_INT, 'fieldstorage_updated' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'fieldstorage_name';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_fieldstorage WHERE fieldstorage_name = %s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $this->_db->escapeString($id)
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_fieldstorage WHERE fieldstorage_name IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map(array($this->_db, 'escapeString'), $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sentity_fieldstorage entity_fieldstorage WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['fieldstorage_created'] = time();
        $values['fieldstorage_updated'] = 0;
        return sprintf('INSERT INTO %sentity_fieldstorage(fieldstorage_name, fieldstorage_addon, fieldstorage_created, fieldstorage_updated) VALUES(%s, %s, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['fieldstorage_name']), $this->_db->escapeString($values['fieldstorage_addon']), $values['fieldstorage_created'], $values['fieldstorage_updated']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['fieldstorage_updated'];
        $values['fieldstorage_updated'] = time();
        return sprintf('UPDATE %sentity_fieldstorage SET fieldstorage_addon = %s, fieldstorage_updated = %d WHERE fieldstorage_name = %s AND fieldstorage_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['fieldstorage_addon']), $values['fieldstorage_updated'], $this->_db->escapeString($id), $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sentity_fieldstorage WHERE fieldstorage_name = %2$s', $this->_db->getResourcePrefix(), $this->_db->escapeString($id));
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['fieldstorage_updated'] = 'fieldstorage_updated=' . time();
        return sprintf('UPDATE %sentity_fieldstorage entity_fieldstorage SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE entity_fieldstorage FROM %1$sentity_fieldstorage entity_fieldstorage WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sentity_fieldstorage entity_fieldstorage WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }
}