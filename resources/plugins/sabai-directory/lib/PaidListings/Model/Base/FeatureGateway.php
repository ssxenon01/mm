<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_PaidListings_Model_Base_FeatureGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'paidlistings_feature';
    }

    public function getFields()
    {
        return array('feature_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'feature_addon' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'feature_settings' => SabaiFramework_Model::KEY_TYPE_TEXT, 'feature_created' => SabaiFramework_Model::KEY_TYPE_INT, 'feature_updated' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'feature_name';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %spaidlistings_feature WHERE feature_name = %s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $this->_db->escapeString($id)
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %spaidlistings_feature WHERE feature_name IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map(array($this->_db, 'escapeString'), $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$spaidlistings_feature paidlistings_feature WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['feature_created'] = time();
        $values['feature_updated'] = 0;
        return sprintf('INSERT INTO %spaidlistings_feature(feature_name, feature_addon, feature_settings, feature_created, feature_updated) VALUES(%s, %s, %s, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['feature_name']), $this->_db->escapeString($values['feature_addon']), $this->_db->escapeString(serialize($values['feature_settings'])), $values['feature_created'], $values['feature_updated']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['feature_updated'];
        $values['feature_updated'] = time();
        return sprintf('UPDATE %spaidlistings_feature SET feature_addon = %s, feature_settings = %s, feature_updated = %d WHERE feature_name = %s AND feature_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['feature_addon']), $this->_db->escapeString(serialize($values['feature_settings'])), $values['feature_updated'], $this->_db->escapeString($id), $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$spaidlistings_feature WHERE feature_name = %2$s', $this->_db->getResourcePrefix(), $this->_db->escapeString($id));
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['feature_updated'] = 'feature_updated=' . time();
        return sprintf('UPDATE %spaidlistings_feature paidlistings_feature SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE paidlistings_feature, table1, table2, table3 FROM %1$spaidlistings_feature paidlistings_feature LEFT JOIN %1$spaidlistings_orderitem table1 ON paidlistings_feature.feature_name = table1.orderitem_feature_name LEFT JOIN %1$spaidlistings_orderitemmeta table2 ON table1.orderitem_id = table2.orderitemmeta_orderitem_id LEFT JOIN %1$spaidlistings_orderlog table3 ON table1.orderitem_id = table3.orderlog_orderitem_id WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$spaidlistings_feature paidlistings_feature WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDelete1($id, array $old)
    {
        $this->_db->exec(sprintf('DELETE table0, table1, table2 FROM %1$spaidlistings_orderitem table0 LEFT JOIN %1$spaidlistings_orderitemmeta table1 ON table0.orderitem_id = table1.orderitemmeta_orderitem_id LEFT JOIN %1$spaidlistings_orderlog table2 ON table0.orderitem_id = table2.orderlog_orderitem_id WHERE table0.orderitem_feature_name = %2$s', $this->_db->getResourcePrefix(), $this->_db->escapeString($id)));
    }

    protected function _beforeDelete($id, array $old)
    {
        $this->_beforeDelete1($id, $old);
    }
}