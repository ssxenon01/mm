<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_PaidListings_Model_Base_OrderItem extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('OrderItem', $model);
        $this->_vars = array('orderitem_status' => 0, 'orderitem_id' => 0, 'orderitem_created' => 0, 'orderitem_updated' => 0, 'orderitem_feature_name' => null, 'orderitem_order_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('orderitem_id' => 0, 'orderitem_created' => 0, 'orderitem_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return 'OrderItem:' . $this->__get('id');
    }

    public function addOrderItemMeta(Sabai_Addon_PaidListings_Model_OrderItemMeta $entity)
    {
        $entity->OrderItem = $this;

        return $this;
    }

    public function removeOrderItemMeta(Sabai_Addon_PaidListings_Model_OrderItemMeta $entity)
    {
        $this->removeOrderItemMetaById($entity->id);

        return $this;
    }

    public function removeOrderItemMetaById($id)
    {
        $this->_removeEntityById('orderitemmeta_id', 'OrderItemMeta', $id);

        return $this;
    }

    public function createOrderItemMeta()
    {
        return $this->_createEntity('OrderItemMeta');
    }

    public function removeOrderItemMetas()
    {
        $this->_removeEntities('OrderItemMeta');

        return $this;
    }

    public function addOrderLog(Sabai_Addon_PaidListings_Model_OrderLog $entity)
    {
        $entity->OrderItem = $this;

        return $this;
    }

    public function removeOrderLog(Sabai_Addon_PaidListings_Model_OrderLog $entity)
    {
        $this->removeOrderLogById($entity->id);

        return $this;
    }

    public function removeOrderLogById($id)
    {
        $this->_removeEntityById('orderlog_id', 'OrderLog', $id);

        return $this;
    }

    public function createOrderLog()
    {
        return $this->_createEntity('OrderLog');
    }

    public function removeOrderLogs()
    {
        $this->_removeEntities('OrderLog');

        return $this;
    }

    public function __get($name)
    {
        if ($name === 'status')
            return $this->_vars['orderitem_status'];
        elseif ($name === 'id')
            return $this->_vars['orderitem_id'];
        elseif ($name === 'created')
            return $this->_vars['orderitem_created'];
        elseif ($name === 'updated')
            return $this->_vars['orderitem_updated'];
        elseif ($name === 'feature_name')
            return $this->_vars['orderitem_feature_name'];
        elseif ($name === 'order_id')
            return $this->_vars['orderitem_order_id'];
        elseif ($name === 'Feature')
            return $this->_fetchEntity('Feature', 'feature_name');
        elseif ($name === 'Order')
            return $this->_fetchEntity('Order', 'order_id');
        elseif ($name === 'OrderItemMetas')
            return $this->_fetchEntities('OrderItemMeta', 'OrderItemMetas');
        elseif ($name === 'OrderLogs')
            return $this->_fetchEntities('OrderLog', 'OrderLogs');
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'status')
            $this->_setVar('orderitem_status', $value);
        elseif ($name === 'id')
            $this->_setVar('orderitem_id', $value);
        elseif ($name === 'feature_name')
            $this->_assignEntityById('Feature', $value, 'orderitem_feature_name');
        elseif ($name === 'Feature') {
            $_value = is_array($value) ? $value[0] : $value;
            if (is_object($_value)) {
                $this->_assignEntity($_value, 'orderitem_feature_name');
            } else {
                $this->_assignEntityById('Feature', $_value, 'orderitem_feature_name');
            }
        }
        elseif ($name === 'order_id')
            $this->_assignEntityById('Order', $value, 'orderitem_order_id');
        elseif ($name === 'Order') {
            $_value = is_array($value) ? $value[0] : $value;
            if (is_object($_value)) {
                $this->_assignEntity($_value, 'orderitem_order_id');
            } else {
                $this->_assignEntityById('Order', $_value, 'orderitem_order_id');
            }
        }
        elseif ($name === 'OrderItemMetas') {
            $this->removeOrderItemMetas();
            foreach (array_keys($value) as $i) $this->addOrderItemMeta($value[$i]);
        }
        elseif ($name === 'OrderLogs') {
            $this->removeOrderLogs();
            foreach (array_keys($value) as $i) $this->addOrderLog($value[$i]);
        }
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'orderitem_status')
            $this->_vars['orderitem_status'] = (int)$value;
        elseif ($name === 'orderitem_id')
            $this->_vars['orderitem_id'] = (int)$value;
        elseif ($name === 'orderitem_created')
            $this->_vars['orderitem_created'] = (int)$value;
        elseif ($name === 'orderitem_updated')
            $this->_vars['orderitem_updated'] = (int)$value;
        elseif ($name === 'orderitem_order_id')
            $this->_vars['orderitem_order_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_PaidListings_Model_Base_OrderItemRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('OrderItem', $model);
    }

    public function fetchByFeature($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('orderitem_feature_name', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByFeature($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Feature', $id, $perpage, $sort, $order);
    }

    public function countByFeature($id)
    {
        return $this->_countByForeign('orderitem_feature_name', $id);
    }

    public function fetchByFeatureAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('orderitem_feature_name', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByFeatureAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Feature', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByFeatureAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('orderitem_feature_name', $id, $criteria);
    }

    public function fetchByOrder($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('orderitem_order_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByOrder($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Order', $id, $perpage, $sort, $order);
    }

    public function countByOrder($id)
    {
        return $this->_countByForeign('orderitem_order_id', $id);
    }

    public function fetchByOrderAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('orderitem_order_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByOrderAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Order', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByOrderAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('orderitem_order_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_PaidListings_Model_Base_OrderItemsByRowset($rs, $this->_model->create('OrderItem'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_PaidListings_Model_Base_OrderItems($this->_model, $entities);
    }
}

class Sabai_Addon_PaidListings_Model_Base_OrderItemsByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_PaidListings_Model_OrderItem $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('OrderItems', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_PaidListings_Model_Base_OrderItems extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'OrderItems', $entities);
    }
}