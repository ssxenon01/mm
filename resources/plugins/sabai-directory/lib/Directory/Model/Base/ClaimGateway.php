<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Directory_Model_Base_ClaimGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'directory_claim';
    }

    public function getFields()
    {
        return array('claim_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'claim_email' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'claim_comment' => SabaiFramework_Model::KEY_TYPE_TEXT, 'claim_comment_html' => SabaiFramework_Model::KEY_TYPE_TEXT, 'claim_status' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'claim_type' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'claim_admin_note' => SabaiFramework_Model::KEY_TYPE_TEXT, 'claim_entity_id' => SabaiFramework_Model::KEY_TYPE_INT, 'claim_entity_bundle_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'claim_id' => SabaiFramework_Model::KEY_TYPE_INT, 'claim_created' => SabaiFramework_Model::KEY_TYPE_INT, 'claim_updated' => SabaiFramework_Model::KEY_TYPE_INT, 'claim_user_id' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'claim_id';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sdirectory_claim WHERE claim_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sdirectory_claim WHERE claim_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sdirectory_claim directory_claim WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['claim_created'] = time();
        $values['claim_updated'] = 0;
        return sprintf('INSERT INTO %sdirectory_claim(claim_name, claim_email, claim_comment, claim_comment_html, claim_status, claim_type, claim_admin_note, claim_entity_id, claim_entity_bundle_name, claim_created, claim_updated, claim_user_id) VALUES(%s, %s, %s, %s, %s, %s, %s, %d, %s, %d, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['claim_name']), $this->_db->escapeString($values['claim_email']), $this->_db->escapeString($values['claim_comment']), $this->_db->escapeString($values['claim_comment_html']), $this->_db->escapeString($values['claim_status']), $this->_db->escapeString($values['claim_type']), $this->_db->escapeString($values['claim_admin_note']), $values['claim_entity_id'], $this->_db->escapeString($values['claim_entity_bundle_name']), $values['claim_created'], $values['claim_updated'], $values['claim_user_id']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['claim_updated'];
        $values['claim_updated'] = time();
        return sprintf('UPDATE %sdirectory_claim SET claim_name = %s, claim_email = %s, claim_comment = %s, claim_comment_html = %s, claim_status = %s, claim_type = %s, claim_admin_note = %s, claim_entity_id = %d, claim_entity_bundle_name = %s, claim_updated = %d, claim_user_id = %d WHERE claim_id = %d AND claim_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['claim_name']), $this->_db->escapeString($values['claim_email']), $this->_db->escapeString($values['claim_comment']), $this->_db->escapeString($values['claim_comment_html']), $this->_db->escapeString($values['claim_status']), $this->_db->escapeString($values['claim_type']), $this->_db->escapeString($values['claim_admin_note']), $values['claim_entity_id'], $this->_db->escapeString($values['claim_entity_bundle_name']), $values['claim_updated'], $values['claim_user_id'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sdirectory_claim WHERE claim_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['claim_updated'] = 'claim_updated=' . time();
        return sprintf('UPDATE %sdirectory_claim directory_claim SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE directory_claim FROM %1$sdirectory_claim directory_claim WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sdirectory_claim directory_claim WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }
}