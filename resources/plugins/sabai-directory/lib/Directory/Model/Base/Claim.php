<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Directory_Model_Base_Claim extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Claim', $model);
        $this->_vars = array('claim_name' => null, 'claim_email' => null, 'claim_comment' => null, 'claim_comment_html' => null, 'claim_status' => null, 'claim_type' => null, 'claim_admin_note' => null, 'claim_entity_id' => 0, 'claim_entity_bundle_name' => null, 'claim_id' => 0, 'claim_created' => 0, 'claim_updated' => 0, 'claim_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('claim_id' => 0, 'claim_created' => 0, 'claim_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return $this->__get('name');
    }

    protected function _assignUser($user, $markDirty = true)
    {
        $this->_setVar('claim_user_id', $user->id, $markDirty);
    }

    protected function _fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->UserIdentity($this->_vars['claim_user_id']);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function __get($name)
    {
        if ($name === 'name')
            return $this->_vars['claim_name'];
        elseif ($name === 'email')
            return $this->_vars['claim_email'];
        elseif ($name === 'comment')
            return $this->_vars['claim_comment'];
        elseif ($name === 'comment_html')
            return $this->_vars['claim_comment_html'];
        elseif ($name === 'status')
            return $this->_vars['claim_status'];
        elseif ($name === 'type')
            return $this->_vars['claim_type'];
        elseif ($name === 'admin_note')
            return $this->_vars['claim_admin_note'];
        elseif ($name === 'entity_id')
            return $this->_vars['claim_entity_id'];
        elseif ($name === 'entity_bundle_name')
            return $this->_vars['claim_entity_bundle_name'];
        elseif ($name === 'id')
            return $this->_vars['claim_id'];
        elseif ($name === 'created')
            return $this->_vars['claim_created'];
        elseif ($name === 'updated')
            return $this->_vars['claim_updated'];
        elseif ($name === 'user_id')
            return $this->_vars['claim_user_id'];
        elseif ($name === 'User')
            return $this->_fetchUser();
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'name')
            $this->_setVar('claim_name', $value);
        elseif ($name === 'email')
            $this->_setVar('claim_email', $value);
        elseif ($name === 'comment')
            $this->_setVar('claim_comment', $value);
        elseif ($name === 'comment_html')
            $this->_setVar('claim_comment_html', $value);
        elseif ($name === 'status')
            $this->_setVar('claim_status', $value);
        elseif ($name === 'type')
            $this->_setVar('claim_type', $value);
        elseif ($name === 'admin_note')
            $this->_setVar('claim_admin_note', $value);
        elseif ($name === 'entity_id')
            $this->_setVar('claim_entity_id', $value);
        elseif ($name === 'entity_bundle_name')
            $this->_setVar('claim_entity_bundle_name', $value);
        elseif ($name === 'id')
            $this->_setVar('claim_id', $value);
        elseif ($name === 'user_id')
            $this->_setVar('claim_user_id', $value);
        elseif ($name === 'User')
            $this->_assignUser($value);
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'claim_entity_id')
            $this->_vars['claim_entity_id'] = (int)$value;
        elseif ($name === 'claim_id')
            $this->_vars['claim_id'] = (int)$value;
        elseif ($name === 'claim_created')
            $this->_vars['claim_created'] = (int)$value;
        elseif ($name === 'claim_updated')
            $this->_vars['claim_updated'] = (int)$value;
        elseif ($name === 'claim_user_id')
            $this->_vars['claim_user_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_Directory_Model_Base_ClaimRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Claim', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('claim_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('claim_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('claim_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('claim_user_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_Directory_Model_Base_ClaimsByRowset($rs, $this->_model->create('Claim'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_Directory_Model_Base_Claims($this->_model, $entities);
    }
}

class Sabai_Addon_Directory_Model_Base_ClaimsByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_Directory_Model_Claim $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Claims', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_Directory_Model_Base_Claims extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Claims', $entities);
    }
}